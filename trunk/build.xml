<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="freequent" default="all">

	<!-- JSP pre-compile flag -->
	<condition property="scalar.jsp.precompile.disable" value="true">
		<istrue value="${jsp.precompile.disable}" />
	</condition>

	<!-- extra jsp precompile classpath element -->
	<property name="jsp.precompile.extra.path.element" value="" />


    <!-- imports -->
	<import file="build-tasks.xml" />

	<!-- BEA JDK -->
	<property name="bea.jdk.dir" value="${build.java.home}" />
	<property name="bea.jdk.jars" value="${bea.jdk.dir}/jre/lib/rt.jar${path.separator}${bea.jdk.dir}/lib/tools.jar${path.separator}${bea.jdk.dir}/jre/lib/jsse.jar${path.separator}${bea.jdk.dir}/jre/lib/security.jar" />
	<property name="bea.jdk.jvm" value="${bea.jdk.dir}/bin/java" />

	<!-- packages -->
	<property name="source.packages" value="com.scalar.freequent.*" />

	<property name="scalar-freequent.jar" value="${jars.dir}/scalar-freequent.jar" />
	<property name="scalar-freequent-msgs.jar" value="${jars.dir}/scalar-freequent-msgs.jar" />
	<property name="scalar-freequent-web.jar" value="${jars.dir}/scalar-freequent-web.jar" />
	<property name="scalar-freequent-config.jar" value="${jars.dir}/scalar-freequent-config.jar" />

	<!-- wars -->
	<property name="exploded.war" value="${temp.dir}/scalar-freeqent.war" />
	<property name="scalar-freequent.war" value="${wars.dir}/scalar-freequent.war" />

	<!-- init -->
	<target name="init">
		<antcall target="build.init" />
		<echo message="" />
		<echo message="   bea.jdk.dir = ${bea.jdk.dir}" />
		<echo message="" />
	</target>

	<!-- clean -->
	<target name="clean" depends="init" description="Clean build">
		<antcall target="build.clean" />
	</target>

	<!-- resourcegen -->
	<target name="resourcegen" depends="init" description="Generate resource bundles">
			
	<antcall target="build.resourcegen">
			<param name="param.resourcegen.package" value="com.scalar.freequent.l10n" />
			<!--<param name="param.resourcegen.package" value="com.scalar.freequent.l10n,
				          com.scalar.freequent.l10n.module" />-->
		</antcall>
   
	</target>

	<!-- checkascii -->
	<target name="checkascii" depends="resourcegen" description="CheckAscii on files">
		<parallel failonany="true">
			<antcall target="build.checkascii-resource">
				<param name="param.source.dir" value="${resource.dir}" />
			</antcall>

			<antcall target="build.checkascii-java">
				<param name="param.source.dir" value="${source.dir}" />
			</antcall>

			<antcall target="build.checkascii-java">
				<param name="param.source.dir" value="${gen.source.dir}" />
			</antcall>
		</parallel>
	</target>

	<!-- docs -->
	<target name="docs" depends="checkascii" description="DocCheck and Javadoc on source">
		<!-- todo: need to fix build.docs-->
		<!--<antcall target="build.docs" />-->
	</target>

	<!-- compile -->
	<target name="compile" depends="docs" description="Compile classes">
		<!-- source -->
		<antcall target="build.compile">
			<param name="param.source.dir" value="${source.dir}" />
		</antcall>
	</target>

	<!-- jar -->
	<target name="jar" depends="compile, testprops, replace-datasource-properties" description="Build jars">
		<mkdir dir="${jars.dir}" />

		<jar destfile="${scalar-freequent.jar}" duplicate="fail">
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
			</manifest>
			<fileset dir="${classes.dir}">
				<exclude name="com/scalar/freequent/config/**/*" />
				<exclude name="com/scalar/freequent/web/**/*" />
			</fileset>
		</jar>

		<jar destfile="${scalar-freequent-msgs.jar}" duplicate="fail">
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
			</manifest>
			<fileset dir="${source.dir}">
				<include name="**/*Resource.properties" />
			</fileset>
		</jar>

		<jar destfile="${scalar-freequent-web.jar}" duplicate="fail">
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
			</manifest>
			<metainf dir="${jar.meta-inf.dir}" />
			<fileset dir="${classes.dir}">
				<exclude name="com/scalar/freequent/config/**/*" />
				<include name="com/scalar/freequent/web/**/*" />
			</fileset>
		</jar>

		<jar destfile="${scalar-freequent-config.jar}" duplicate="fail">
			<fileset dir="${classes.dir}">
				<include name="com/scalar/freequent/config/**/*" />
			</fileset>
		</jar>
	</target>

	<!-- resources -->
	<target name="resources" depends="init" description="Build resources">
		<copy todir="${resources.dir}" includeEmptyDirs="false">
			<fileset dir="${war.resource.dir}">
				<exclude name="script/**/*" />
			</fileset>
		</copy>

		<antcall target="build.version.properties">
			<param name="param.properties.dir" value="${properties.dir}" />
			<param name="param.prefix" value="scalar-freequent" />
			<param name="param.major" value="${version.major}" />
			<param name="param.minor" value="${version.minor}" />
			<param name="param.revision" value="${version.revision}" />
			<param name="param.patchlevel" value="${version.patchlevel}" />
		</antcall>
	</target>

	<!-- jslint -->
	<target name="jslint" depends="init" description="JSLint on JS files">
		<parallel failonany="true">
			<!-- lint -->
			<antcall target="build.jslint">
				<param name="param.script.dir" value="${war.script.dir}" />
				<param name="param.name" value="ui" />
			</antcall>
		</parallel>
	</target>

	<!-- scripts -->
	<target name="scripts" depends="jslint" description="Build scripts">
		<!-- vcm-vext -->
		<!--<antcall target="build.scripts.concat">
			<param name="param.src.dir" value="${war.script.dir}" />
			<param name="param.dst.dir" value="${scripts.dir}/vcm/ui" />
			<param name="param.src.name" value="vext" />
			<param name="param.root.name" value="vui.vcm.vext" />
			<param name="param.file.name" value="vcm-vext" />
		</antcall>-->

		<!-- ui -->
		<!--<antcall target="build.scripts.concat">
			<param name="param.src.dir" value="${war.script.dir}/ui" />
			<param name="param.dst.dir" value="${scripts.dir}/vcm/ui" />
			<param name="param.src.name" value="ui" />
			<param name="param.root.name" value="vui.vcm.ui" />
			<param name="param.file.name" value="vcm-ui" />
		</antcall>-->

		<!-- root js -->
		<copy todir="${scripts.dir}" includeEmptyDirs="false">
			<fileset dir="${war.script.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- rangy -->
		<!--<copy todir="${thirdparty.scripts.dir}/rangy" includeEmptyDirs="false">
			<fileset dir="${lib.dir}/ship/rangy" />
		</copy>-->
	</target>

	<!-- exploded war -->
	<target name="exploded.war" depends="jar, resources, scripts" description="Build exploded war">
		<mkdir dir="${exploded.war}" />

		<!-- jars -->
		<copy todir="${exploded.war}/WEB-INF/lib" flatten="true" includeEmptyDirs="false">
			<path refid="jstl.jars.ref" />
			<fileset file="${scalar-freequent-web.jar}" />
			<fileset file="${scalar-freequent.jar}" />
			<fileset file="${scalar-freequent-config.jar}" />
			<fileset file="${struts.jar}" />
			<fileset file="${xerces.jar}" />
			<fileset file="${json.jar}" />
			<fileset file="${org.springframework.asm.jar}" />
			<fileset file="${org.springframework.beans.jar}" />
			<fileset file="${org.springframework.context.jar}" />
			<fileset file="${org.springframework.context.support.jar}" />
			<fileset file="${org.springframework.core.jar}" />
			<fileset file="${org.springframework.expression.jar}" />
			<fileset file="${org.springframework.web.jar}" />
			<fileset file="${org.springframework.web.servlet.jar}" />
			<fileset file="${org.springframework.transaction.jar}" />
			<fileset file="${org.springframework.jdbc.jar}" />
			<fileset file="${org.springframework.orm.jar}" />
			<fileset file="${org.springframework.aop.jar}" />
			<fileset file="${aopalliance.jar}" />
			<fileset file="${hibernate.jar}" />
			<fileset file="${log4j.jar}"/>
			<fileset file="${commons-logging.jar}"/>
			<fileset file="${commons-beanutils.jar}"/>
			<fileset file="${commons-fileupload.jar}"/>
			<fileset file="${commons-io.jar}"/>
			<fileset file="${mysql-connector.jar}"/>
			<fileset file="${jta.jar}"/>
			<fileset file="${dom4j.jar}"/>
            <fileset file="${slf4j-api.jar}" />
		    <fileset file="${slf4j-log4j.jar}" />
            <fileset file="${commons-dbcp.jar}" />
            <fileset file="${commons-pool.jar}" />
            <fileset file="${commons-collections.jar}" />
            <fileset file="${commons-digester.jar}" />
			<fileset file="${tiles-api.jar}" />
        	<fileset file="${tiles-core.jar}" />
        	<fileset file="${tiles-jsp.jar}" />
        	<fileset file="${tiles-servlet.jar}" />
        	<fileset file="${tiles-template.jar}" />
            <fileset file="${jaxb-api.jar}" />
            <fileset file="${jaxb-impl.jar}" />
            <fileset file="${jaxb-xjc.jar}" />
		</copy>

		<!-- root config -->
		<!--<copy todir="${exploded.war}/WEB-INF/classes" includeEmptyDirs="false">
			<fileset dir="${classes.dir}">
				<include name="com/scalar/freequent/config/*" />
			</fileset>
		</copy>-->

		<!-- copy scalar resources -->
		<copy todir="${exploded.war}" includeEmptyDirs="false">
			<fileset dir="${resources.dir}">
				<exclude name="properties/**/*" />
			</fileset>
		</copy>

		<copy todir="${exploded.war}" includeEmptyDirs="false" overwrite="true">
			<fileset dir="${resources.dir}">
				<include name="properties/**/*" />
			</fileset>
		</copy>
		
	</target>

	<!-- war -->
	<target name="war" depends="exploded.war" description="Build war">
		<mkdir dir="${wars.dir}" />
		<jar destfile="${scalar-freequent.war}" duplicate="fail">
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
			</manifest>
			<fileset dir="${exploded.war}" />
		</jar>
	</target>

	<!-- copy exploded wars -->
	<basename file="${exploded.war}" property="exploded.war.filename" />

	<!-- testprops -->
	<target name="testprops" if="ui.debug.mode">
		<propgen srcdir="${source.dir}" destdir="${classes.dir}">
			<include name="com/scalar/**/*Resource.properties" />
		</propgen>
	</target>

	<!-- tests -->
	<target name="get-jvm">
		<echo message= "${ant.java.version}"/>
		<condition property="jvm.ok">
			<not>
				<or>
					<equals arg1="${ant.java.version}" arg2="${test.compile.jvmlevel}"/>
				</or>
			</not>
		</condition>
	</target>

	<target name="check-jvm" depends="get-jvm" unless="jvm.ok">
		<fail message="Wrong JVM - ${ant.java.version} -- is required to run these tests"/>
	</target>

	<!-- nightly build target -->
	<target name="nightly_build" depends="all" />

	<!-- all -->
	<target name="all" depends="war" description="Build all: war" />

	<path id="deployer.classpath">
		<fileset dir="${scalar.tomcat.deployer.dir}/lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<target name="deploy" depends="init" description="deploy web app">
		<antcall target="build.deploy" />
	</target>

	<target name="undeploy" depends="init" description="undeploy web app">
		<antcall target="build.undeploy" />
	</target>

	<target name="reload" depends="init" description="reload web app">
		<antcall target="build.reload" />
	</target>

	<target name="stop" depends="init" description="stop web app">
		<antcall target="build.stop" />
	</target>

	<target name="start" depends="init" description="start web app">
		<antcall target="build.start" />
	</target>


	<!-- Configure the custom Ant tasks for the Manager application -->
	<taskdef resource="org/apache/catalina/ant/catalina.tasks" classpathref="deployer.classpath"/>
	<target name="build.deploy" description="Deploy web application">
		<deploy url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}"
				path="${context.path}" war="${webapp.path}" update="true"/>
	</target>

	<target name="build.undeploy" description="Undeploy web application">
		<undeploy url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}"
				  path="${context.path}"/>
	</target>

	<!-- Webapp lifecycle control -->
	<target name="build.start" description="Start web application">
		<start url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}"
			   path="${context.path}"/>
	</target>
	<target name="build.reload" description="Reload web application">
		<reload url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}"
				path="${context.path}"/>
	</target>
	<target name="build.stop" description="Stop web application">
		<stop url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}"
			  path="${context.path}"/>
	</target>

	<target name="autoclean" depends="clean, drop_tables" description="clean, undeploy"/>
	<target name="autodeploy" depends="war, deploy" description="war and deploy"/>
	<target name="autoconfig" depends="all, war, create_tables" />
</project>
